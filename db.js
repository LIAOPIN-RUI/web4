const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// 資料庫檔案路徑
const dbDir = path.join(__dirname, 'db');
const dbPath = path.join(dbDir, 'sqlite.db');

// 確保 db 資料夾存在
if (!fs.existsSync(dbDir)) {
    try {
        fs.mkdirSync(dbDir);
        console.log('成功建立 db 資料夾:', dbDir);
    } catch (err) {
        console.error('無法建立 db 資料夾:', err.message);
        process.exit(1);
    }
}

// 開啟（或建立）資料庫
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('無法開啟資料庫:', err.message);
        console.error('資料庫路徑:', dbPath);
        process.exit(1);
    } else {
        console.log('成功開啟資料庫:', dbPath);

        // 建立 copper_price 資料表
        db.run(`CREATE TABLE IF NOT EXISTS copper_price (
            year INTEGER PRIMARY KEY,
            average_price REAL NOT NULL,
            highest_price REAL NOT NULL,
            lowest_price REAL NOT NULL,
            annual_range REAL NOT NULL
        )`, (err) => {
            if (err) {
                console.error('建立 copper_price 資料表失敗:', err.message);
                process.exit(1);
            } else {
                console.log('copper_price 資料表已確認存在');

                // 插入資料
                const rawData = [
                    [2024, 4.2104, 5.1056, 3.6864, 6.50],
                    [2023, 3.8662, 4.2912, 3.5728, 1.89],
                    [2022, 3.9969, 4.9375, 3.2272, -14.40],
                    [2021, 4.2445, 4.7620, 3.5245, 26.83],
                    [2020, 2.8013, 3.6275, 2.1005, 25.80],
                    [2019, 2.7218, 2.9675, 2.5280, 6.31],
                    [2018, 2.9333, 3.3000, 2.5600, -20.20],
                    [2017, 2.8128, 3.2995, 2.4890, 31.65],
                    [2016, 2.2010, 2.6915, 1.9435, 17.38],
                    [2015, 2.4947, 2.9350, 2.0210, -24.57],
                    [2014, 3.1058, 3.3815, 2.8266, -16.95],
                    [2013, 3.3385, 3.7845, 3.0245, -6.70],
                    [2012, 3.6101, 3.9785, 3.2850, 6.26],
                    [2011, 4.0039, 4.6285, 3.0575, -22.73],
                    [2010, 3.4361, 4.4455, 2.7660, 32.99],
                    [2009, 2.3721, 3.3427, 1.3960, 137.58],
                    [2008, 3.1145, 4.0635, 1.2595, -53.70],
                    [2007, 3.2317, 3.7635, 2.4165, 5.97],
                    [2006, 3.0597, 3.9230, 2.0485, 38.81],
                    [2005, 1.6254, 2.1679, 1.3430, 41.56],
                    [2004, 1.2854, 1.4758, 1.0665, 39.66],
                    [2003, 0.8126, 1.0450, 0.7110, 48.99],
                    [2002, 0.7199, 0.7860, 0.6580, 6.63],
                    [2001, 0.7295, 0.8615, 0.6060, -22.03],
                    [2000, 0.8437, 0.9360, 0.7435, -2.00],
                    [1999, 0.7265, 0.8609, 0.6135, 28.44],
                    [1998, 0.7547, 0.8565, 0.6515, -13.91],
                    [1997, 1.0280, 1.2220, 0.7698, -22.73],
                    [1996, 1.0385, 1.2555, 0.8437, -17.17],
                    [1995, 1.3262, 1.4575, 1.2110, -12.44],
                    [1994, 1.0653, 1.3895, 0.7860, 66.95],
                    [1993, 0.8565, 1.0760, 0.7260, -19.54],
                    [1992, 1.0312, 1.1635, 0.9435, 6.22],
                    [1991, 1.0414, 1.1930, 0.9665, -16.87],
                    [1990, 1.1546, 1.3355, 0.9565, 9.98],
                    [1989, 1.2255, 1.4955, 0.9880, -23.21],
                    [1988, 1.0849, 1.5600, 0.8582, 5.78],
                    [1987, 0.7700, 1.3700, 0.6020, 114.95],
                    [1986, 0.6200, 0.6860, 0.5695, -4.69],
                    [1985, 0.6147, 0.6590, 0.5640, 12.20],
                    [1984, 0.6198, 0.7175, 0.5510, -14.55],
                    [1983, 0.7264, 0.8150, 0.6110, -3.80],
                    [1982, 0.6662, 0.7590, 0.5440, -7.90],
                    [1981, 0.7995, 0.9090, 0.7085, -12.39],
                    [1980, 0.9813, 1.4300, 0.7860, -18.00],
                    [1979, 0.8882, 1.1300, 0.7005, 48.19],
                    [1978, 0.6288, 0.7076, 0.5530, 17.66],
                    [1977, 0.6074, 0.7240, 0.5200, -4.60],
                    [1976, 0.6467, 0.7830, 0.5380, 14.29],
                    [1975, 0.5608, 0.6290, 0.5160, 3.37],
                    [1974, 0.8962, 1.3830, 0.5336, -38.47],
                    [1973, 0.7682, 1.0585, 0.5020, 73.16],
                    [1972, 0.4942, 0.5330, 0.4610, 3.02],
                    [1971, 0.4960, 0.5860, 0.4435, 4.63],
                    [1970, 0.6210, 0.7710, 0.4545, -36.38],
                    [1969, 0.6195, 0.7440, 0.5040, 43.67],
                    [1968, 0.5080, 0.7400, 0.4330, -11.72],
                    [1967, 0.4918, 0.6453, 0.4150, 6.57],
                    [1966, 0.6338, 0.8270, 0.4640, -6.15],
                    [1965, 0.4893, 0.6045, 0.3655, 54.97],
                    [1964, 0.4032, 0.5895, 0.3045, 21.96],
                    [1963, 0.2976, 0.3046, 0.2870, 5.80],
                    [1962, 0.2925, 0.3075, 0.2800, -4.51],
                    [1961, 0.2981, 0.3276, 0.2672, 8.73],
                    [1960, 0.2983, 0.3286, 0.2753, -13.32],
                ];

                const insertSQL = `
                    INSERT OR IGNORE INTO copper_price 
                    (year, average_price, highest_price, lowest_price, annual_range) 
                    VALUES (?, ?, ?, ?, ?)
                `;
                rawData.forEach(row => {
                    db.run(insertSQL, row, (err) => {
                        if (err) {
                            console.error('插入資料失敗:', err.message, '資料:', row);
                        }
                    });
                });

                // 驗證資料筆數
                setTimeout(() => {
                    db.get('SELECT COUNT(*) as count FROM copper_price', (err, row) => {
                        if (err) {
                            console.error('檢查 copper_price 表格失敗:', err.message);
                        } else {
                            console.log(`copper_price 表格包含 ${row.count} 筆資料`);
                        }
                    });
                }, 1000);

                console.log('copper_price 資料插入開始（如不存在）');
            }
        });
    }
});

module.exports = db;
